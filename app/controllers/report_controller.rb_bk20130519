#encoding: utf-8
class ReportController < ApplicationController
  require "will_paginate/array"
  layout "win8_layout"
  
  #发送报告首页
  def index
   @campaign = Campaign.find(params[:c_id])

    respond_to do |format|
      format.html
    end
  end
  
  #开信用户数据
  def tracks
    if params[:c_id].present?
      #@tracks = Track.includes(:member,:campaign).order("created_at desc").paginate(:conditions => ["campaign_id = ?", params[:c_id]],:page => params[:page], :per_page => 20)
      @tracks = Track.includes(:member,:campaign)
                      .select("campaign_id,member_id,count(*) as count,max(created_at) as last_at")
                      .group("member_id")
                      .where("campaign_id = ?",params[:c_id])
                      .paginate(:page => params[:page],:per_page => 20, :order => "last_at desc")
                      
      @track_data = Track.select("count(member_id) as track_num,count(distinct member_id) as peo_num").where("campaign_id = ?",params[:c_id])[0]
    else
      @tracks = Track.includes(:member,:campaign)
                      .select("campaign_id,member_id,count(*) as count,max(created_at) as last_at")
                      .group("member_id")
                      .paginate(:page => params[:page],:per_page => 20, :order => "last_at desc")
                      
      @track_data = Track.select("count(member_id) as track_num,count(distinct member_id) as peo_num")[0]      
    end     
    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @tracks }
    end
  end
  
  #点击用户数据
  def clicks
   if params[:l_id].present? and params[:c_id].present?
     @clicks = Click.includes(:member, :campaign, :link).paginate(:page => params[:page], :per_page => 20 ,:conditions  => ["link_id = ? and campaign_id = ?", params[:l_id],params[:c_id]])
   elsif params[:c_id].present?
     #@clicks = Click.includes(:member, :campaign, :link).order("member_id desc").paginate(:page => params[:page], :per_page => 20 ,:conditions  => ["campaign_id = ?", params[:c_id]])
     @clicks = Click.includes(:member, :campaign, :link)
                    .select("member_id,campaign_id,link_id,count(*) as count,max(updated_at) as last_at")
                    .group("member_id,link_id")
                    .order("max(updated_at) desc")
                    .where("campaign_id=?",params[:c_id])
                    .paginate(:page => params[:page],:per_page => 20, :order => "last_at desc")
                    
      @click_data = Click.select("count(member_id) as click_num,count(distinct member_id) as peo_num").where("campaign_id = ?",params[:c_id])[0]
   else
     @clicks = Click.includes(:member, :campaign, :link)
                    .select("member_id,campaign_id,link_id,count(*) as count,max(updated_at) as last_at")
                    .group("member_id,link_id")
                    .order("max(updated_at) desc")
                    .paginate(:page => params[:page],:per_page => 20, :order => "last_at desc")
                    
     @click_data = Click.select("count(member_id) as click_num,count(distinct member_id) as peo_num")[0]
   end
    
    user_action_log(0,params[:controller],"index")

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @clicks }
    end
  end
  
  #在模板中显示链接点击次数
  def templates
    @c_id = params[:c_id]
    template= Rails.root.join("app","views","report","templates","#{@c_id}.html.erb")
    @c_id = -1 unless File.exists?(template)
    
    respond_to do |format|
      format.html
    end    
  end
  
  #点击、开信用户动作时间比例图表
  def time
    campaign_id = params[:c_id]
    @click_data = Click.select("hour(created_at) as hour,count(*) as num")
                      .where("campaign_id=#{campaign_id}")
                      .group("hour(created_at)")
                      .order("hour(created_at) asc")
    @track_data = Track.select("hour(created_at) as hour,count(*) as num")
                      .where("campaign_id=#{campaign_id}")
                      .group("hour(created_at)")
                      .order("hour(created_at) asc")
  end
  
  #名单管理；有效名单、无效名单、域名比例
  def member
    
  end
  
  #发送信综合数据
  def datas
    if params[:c_id].present?
      @report = DogData.select("sum(send_num) AS send_num,sum(send_ok) AS send_ok")
                       .where("campaign_id=#{params[:c_id]}").group("campaign_id")[0]
      @campaign = Campaign.find(params[:c_id])
      @bi_over = true
      if @report.present?
       #@report.member_num,@report.member_unvalid = update_member(@campaign)
      else
       @bi_over = false
      end
    else
      @campaign = nil
    end
   
  end
 
  
  #退订用户信息
  def unsubscribe
    
  end
  
  #开信、点击用户使用浏览器比例
  def browser
    
  end
  
  #开信、点击用户邮箱域名比例
  def domain
    
  end
  
  #开信、点击用户地理位置段
  def user_map
    
  end
  
  #模板链接点击数据处理
  
  
  def rank(array)
    click_num = 0
    rank_index = 1
    array.each_with_index do |item,index|
      if item[:click_num] == 0
        item.merge!({:zero => 1})
      else
        item.merge!({:zero => 0})
      end
      if index == 0
        item.merge!({:rank => rank_index})
        click_num = item[:click_num]
        rank_index += 1
      else
        if item[:click_num] == click_num
          item.merge!({:rank => array[index-1][:rank_index]})
        else
          item.merge!({:rank => rank_index})
          click_num = item[:click_num]
          rank_index += 1
        end
      end
    end
    array
  end
  
  def clickinfo
    campaign_id = params[:campaign_id]
    
    arr_clicks, @tname = perform(campaign_id)
    
    count_clicks = Array.new
    if arr_clicks.present?
      arr_clicks.each do |hlink|
        count_clicks.push(
          {:link_id => hlink[:l],
           :campaign_id => hlink[:c],
           :click_num => Click.find(
             :all, 
             :conditions => ["link_id = ? and campaign_id= ?", hlink[:l],hlink[:c]]).length})
      end
      #提前排序
      count_clicks.sort!{ |x,y| y[:click_num] <=> x[:click_num] }
    end
    @rank_clicks = rank(count_clicks)

    respond_to do |format|
      format.html { render :layout => false }
    end
  end
  
  
  def perform(id)
    @campaign = Campaign.find(id.to_i)
    from_name = @campaign.from_name
    from_email = @campaign.from_email
    from = from_name.present? ? %{"#{from_name}" <#{from_email}>} : from_email
    subject = @campaign.subject
    
    alink = nil
    fname = nil
    if @campaign.template.present?
      template_name = @campaign.template.file_name
      
      template_img_url = @campaign.template.img_url
      
      memberarray = Array.new
      @campaign.lists.collect(&:members).flatten.each do |member|
        memberarray.push(member.id)
      end
      members = Member.find(memberarray.uniq)
      if members.count > 0 then
          to_email = "hello"
          to_name = id.to_s
          alink,fname = email_with_template_job(from_email, from, to_email, to_name, members.first.id, subject, @campaign.id, @campaign.template.id, @campaign.template.img_url)
      end
     else
       alink = []
       fname = ''
     end
     return [alink,fname]
  end
  
  def email_with_template_job(hfrom, from, to_email, to_name, member_id, subject, campaign_id, template_id, img_url)
    readfile = YAML.load_file('config/readfile.yml')
    readip = readfile["sendip"]
    readport = readfile["sendport"]
    bodyhtml = "<body>"
    _bodyhtml,alink = display_email_job(template_id,img_url,member_id,campaign_id)
    bodyhtml << _bodyhtml
    #删掉开信记录的图片
    #bodyhtml << %Q{<img src="http://#{readip}:#{readport}/track.gif?c=#{campaign_id}&u=#{member_id}" style="display:none" />}
    bodyhtml << "</body>"
    
    sendmail= Rails.root.join("app","views","report","templates","#{to_name}.html.erb")
    unless File.exists? sendmail
      file = File.open(sendmail,"w")
      file.print(bodyhtml.to_s)
      file.close
      puts "*"*50
      puts "write"
    else
      puts "*"*50
      puts "no write"
    end

    return [alink,File.basename(sendmail)]
  end

  def display_email_job(template_id,img_url,member_id,campaign_id)
    alink = Array.new
    readfile = YAML.load_file('config/readfile.yml')
    readip = readfile["sendip"]
    readport = readfile["sendport"]
    template = Template.find(template_id)
    if template.zip_url != nil then
      images = "/files/" + template.zip_url.to_s.split(".")[0] + "/images/"
    else
      images = "/images/"
    end
    entries = Entry.find_all_by_template_id(template_id)
    source = IO.readlines(Rails.root.join('lib/emails', "#{template.file_name}.html.erb")).join("").strip
    puts "@"*50
    puts "#{template.file_name}.html.erb"
    source = source.gsub(/Dear \$\|NAME\|\$ <br\/>/, "")
    source = source.gsub(/from \$\|EMAIL\|\$ <br\/>/, "")
    entries.each do |e|
      if e.name.include? "img" then
        if img_url == 1 then
          source = source.gsub(/\$\|#{e.name}\|\$/, "cid:" + e.default_value.to_s)
        else
          if(e.default_value.to_s=~/http:\/\/([\w-]+\.)+[\w-]+(\/[\w-]*)?.*/) != nil then
            source = source.gsub(/\$\|#{e.name}\|\$/, e.default_value)
          else
            source = source.gsub(/\$\|#{e.name}\|\$/, "http://#{readip}:#{readport}#{images}" + e.default_value)
          end
        end
        
      else
        v = e.default_value
        if %r{^(http|https)://(.*)}.match(e.default_value)
          link = Link.where(:url => v).first_or_create
          v = "http://#{readip}:#{readport}/click?u=#{member_id}&c=#{campaign_id}&l=#{link.id}"
          alink.push({:u=>"#{member_id}",:c=>"#{campaign_id}",:l=>"#{link.id}"})
          source = source.gsub(/\$\|#{e.name}\|\$/, v)
        else
          source = source.gsub(/\$\|#{e.name}\|\$/, e.default_value)
        end
      end
    end
    return [source.lstrip.to_s,alink]
  end
=begin  
#活动分析报表
  def campaign
    @campaign_id = params[:id]
    @campaign_report = get_campaign_report_by_id(@campaign_id)
    @campaign_name = Campaign.find(@campaign_id).name
    @data_x = Array.new
    @data = Hash.new
    klazzs = [Track, Click]
    klazzs.each do |klazz|
      entry = klazz.to_s.downcase.pluralize
      bg = klazz.find(:all,:select => "date(MIN(#{entry}.created_at)) AS FirstCreate", 
        :conditions => ["#{entry}.campaign_id = ?", @campaign_id])[0].FirstCreate
        ed = bg + 30
          responsed = DimDate.find(:all,
            :select => "date_d,count(#{entry}.id) AS Number",
            :joins => "LEFT JOIN #{entry} ON date(#{entry}.created_at) = date(dim_dates.date_d) AND #{entry}.campaign_id = #{@campaign_id}",
            :conditions => ["date(dim_dates.date_d) BETWEEN '#{bg}' AND '#{ed}'"],  
            :group => "date_d")

          rule = Array.new
          responsed.each do |m|
            rule.push([m.date_d.strftime("%d %b"),m.Number])#%Y-%m-%d
          end
          data = Array.new
          data_x = Array.new
          rule.each do |r|
            data_x.push(r[0])
            data.push(r[1])
          end
          @data_x = @data_x|data_x
          @data["#{entry}"] = data
    end
    
    @h = LazyHighCharts::HighChart.new('graph') do |f|
      f.options[:chart][:defaultSeriesType] = "column"
      @data.each_pair do |key, value| 
        f.series(:name => key, :data=> value)
      end
      f.options[:title][:text] = "近30天#{@campaign_report[0]}分析报告"      
      f.options[:xAxis][:categories] = @data_x
      f.options[:legend][:layout] = 'horizontal' #'vertical'
    end 
    
    respond_to do |format|
      format.html # index.html.erb
      format.js
    end
  end

#点击分析报表
  def click
    @report_click,@h = get_analyze_report(Click,params[:campaign_id])
    params[:campaign_id].present?? (@isCampare=false) : (@isCampare=true)
      
    respond_to do |format|
      format.html # index.html.erb
      format.js
    end
  end
    
  def click_list
    @campaign_id = params[:campaign_id]
    @clicks = Click.find(:all,
      :select => "members.name AS MemName,members.email AS MemEmail,links.url AS LinkUrl,campaigns.name AS CampaignName",
      :joins => "LEFT JOIN members ON members.id = clicks.member_id LEFT JOIN links ON links.id = clicks.link_id LEFT JOIN campaigns ON campaigns.id = clicks.campaign_id",
      :conditions => ["clicks.campaign_id = ?", @campaign_id]).paginate(:page => params[:page], :per_page => 10)
    
    respond_to do |format|
      format.html # index.html.erb
      format.js
    end 
  end
        
  def click_gt_two
    @campaign_id = params[:campaign_id]
    @campaign_name = Campaign.find(@campaign_id).name
    @click_gt_2 = Click.find(:all,
        :select => "*,COUNT(clicks.link_id) AS ReCount,MAX(members.name) AS MemName,MAX(members.email) AS MemEmail,MAX(links.url) AS LinkUrl",
        :joins => "LEFT JOIN members ON clicks.member_id = members.id LEFT JOIN links ON clicks.link_id = links.id",
        :conditions => ["clicks.campaign_id = ?", @campaign_id],
        :group => "clicks.member_id",
        :having =>"COUNT(clicks.link_id) >= 2")
    @click_gt_2_count = @click_gt_2.size
    @click_gt_2 = @click_gt_2.paginate(:page => params[:page], :per_page => 10)
   
    respond_to do |format|
      format.html
      format.js
    end
  end
#打开分析报表 
  def track
    @report_track,@h = get_analyze_report(Track,params[:campaign_id])
    params[:campaign_id].present?? (@isCampare=false) : (@isCampare=true) 
   
    respond_to do |format|
      format.html
      format.js
    end
  end
  
  def track_list
    @campaign_id = params[:campaign_id]
    @tracks = Track.find(:all,
      :select => "members.name AS MemName,members.email AS MemEmail,campaigns.name AS CampaignName",
      :joins => "LEFT JOIN members ON members.id = tracks.member_id LEFT JOIN campaigns ON campaigns.id = tracks.campaign_id",
      :conditions => ["tracks.campaign_id = ?", @campaign_id]).paginate(:page => params[:page], :per_page => 10)
   
    respond_to do |format|
      format.html
      format.js
    end
  end



  def get_analyze_report(klazz,campaign_id)
    entry = klazz.to_s.downcase.pluralize
    if campaign_id.nil? 
      bg = klazz.find(:all,
        :select => "date(MIN(#{entry}.created_at)) AS FirstCreate")[0].FirstCreate
    else
          bg = klazz.find(:all,
            :select => "date(MIN(#{entry}.created_at)) AS FirstCreate",
            :conditions => ["#{entry}.campaign_id = ?", campaign_id])[0].FirstCreate
    end
      ed = bg + 30
    @report_click = Array.new
      @data_x = Array.new
      @data_click = Array.new
    if campaign_id.nil?
      @id_array = klazz.find(:all,
        :select => "DISTINCT #{entry}.campaign_id AS CampaignId",
        :joins =>"INNER JOIN campaigns ON campaigns.id = #{entry}.campaign_id")
      datax = Array.new
          @id_array.each do |template_id| 
              @report_click.push(get_campaign_report_by_id(template_id.CampaignId)) 
            responsed = DimDate.find(:all,
              :select => "date_d,count(#{entry}.id) AS ClickNum",
              :joins => "LEFT JOIN #{entry} ON date(#{entry}.created_at) = date(dim_dates.date_d) AND #{entry}.campaign_id = #{template_id.CampaignId}",
              :conditions => ["date(dim_dates.date_d) BETWEEN '#{bg}' AND '#{ed}'"],            
              :group => "date_d")
            rule = Array.new
            responsed.each do |m|
              rule.push([m.date_d.strftime('%d %b'),m.ClickNum])#%Y-%m-%d
            end
            data_x = Array.new
            data_click = Array.new
            rule.each do |r|
              data_x.push(r[0])
              data_click.push(r[1])
            end
            datax.push(data_x)
            @data_click.push(data_click)
         end
         
         datax.each do |x|
           @data_x |= x
         end
    else
      @report_click.push(get_campaign_report_by_id(campaign_id)) 
          responsed = DimDate.find(:all,
              :select => "date_d,count(#{entry}.id) AS ClickNum",
              :joins => "LEFT JOIN #{entry} ON date(#{entry}.created_at) = date(dim_dates.date_d) AND #{entry}.campaign_id = #{campaign_id}",
              :conditions => ["date(dim_dates.date_d) BETWEEN '#{bg}' AND '#{ed}'"],            
              :group => "date_d")
  
        responsed.each do |m|
          @data_x.push(m.date_d.strftime('%d %b'))#%Y-%m-%d
          @data_click.push(m.ClickNum)
        end
    end
      @h = LazyHighCharts::HighChart.new('graph') do |f|
        f.options[:chart][:defaultSeriesType] = "column"
        if campaign_id.nil?
              (0..@id_array.size-1).each do |i| 
                f.series(:name => "template#{@id_array[i].CampaignId}", :data=> @data_click[i] )
              end
            else
              f.series(:name => "#{@report_click[0][0]}", :data=> @data_click )
            end
        f.options[:title][:text] = "近30天#{entry}分析报告"      
        f.options[:xAxis][:categories] = @data_x
        f.options[:xAxis][:lineColor] = "#ff0000"
        f.options[:legend][:backgroundColor] = '#ffffff'
        f.options[:legend][:layout] = 'horizontal' #'vertical'
      end 
  
      return @report_click,@h
  end
  
  def get_campaign_report_by_id(id)
    @campaign_id = id
    @campaign_name = Campaign.find(@campaign_id).name
    #总名单人数
    @total_members = CampaignList.find(:all,
                     :select => "count(distinct members.id) AS MemberCount",
                     :joins => "LEFT JOIN members ON campaign_lists.list_id = members.list_id",
                     :conditions => ["campaign_lists.campaign_id = ?", @campaign_id])[0].MemberCount
    #总打开人数       
    @total_tracks = Track.find(:all,
                     :select => "count(distinct tracks.member_id) AS MemberCount",
                     :conditions => ["tracks.campaign_id = ?", @campaign_id])[0].MemberCount
    #总点击人数
    @total_clickers = Click.find(:all,
                     :select => "count(distinct clicks.member_id) AS MemberCount",
                     :conditions => ["clicks.campaign_id = ?", @campaign_id])[0].MemberCount
    #总点击次数
    @total_clicks = Click.find(:all,
                     :select => "count(clicks.member_id) AS MemberCount",
                     :conditions => ["clicks.campaign_id = ?", @campaign_id])[0].MemberCount
                     
    @report_array = Array.new
    @report_array.push(@campaign_name,@total_members,@total_tracks,@total_clickers,@total_clicks)
    
    return @report_array
  end
=end
end
