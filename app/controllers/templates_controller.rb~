class TemplatesController < ApplicationController
  after_filter :auto_check_email_file, :only => [:create, :update, :destroy]
  after_filter :auto_check_template_img_dir, :only => [:destroy]

  def index
    @templates = Template.all
    @template = Template.new

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @templates }
    end
  end

  def show
    @template = Template.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @template }
    end
  end

  def new
    @template = Template.new

    respond_to do |format|
      format.html
      format.js
    end
  end

  def edit
    @template = Template.find(params[:id])

    respond_to do |format|
      format.html
      format.js
    end
  end

  def create
    @template = Template.new(params[:template])

    respond_to do |format|
      if @template.save
        format.html { redirect_to @template, notice: 'Template was successfully created.' }
        format.js
      else
        format.html { render action: "new" }
        format.js { render action: "new" }
      end
    end
  end

  def update
    @template = Template.find(params[:id])

    respond_to do |format|
      if @template.update_attributes(params[:template])
        format.html { redirect_to @template, notice: 'Template was successfully updated.' }
        format.js
      else
        format.html { render action: "edit" }
        format.js { render action: "edit" }
      end
    end
  end

  def destroy
    @template = Template.find(params[:id])
    @template.destroy

    respond_to do |format|
      format.html { redirect_to templates_url }
      format.js
    end
  end
  
  def dyna_source
    @template = Template.find(params[:id])
    @dyna_content = IO.readlines(Rails.root.join("lib/emails", "#{@template.file_name}.html.erb")).join("").strip
    
    respond_to do |format|
      format.html
      format.js
    end
  end
  
  def auto_check_email_file
				Dir.foreach(Rails.root.join("lib/emails")) do |d|
				  if d!="." and d!=".." and Template.find_by_file_name(File.basename(d,".html.erb")).nil?
				    File.delete("#{Rails.root.join("lib/emails")}/#{d}") if File.file?("#{Rails.root.join("lib/emails")}/#{d}")
				  end
		  end
  end
  
  def is_dir_empty(dir)
    Dir.foreach(Rails.root.join("public/entries","#{dir}")) do |d|
      if d!="." and d!=".."
        return false 
      end
    end
    return true
  end
  def auto_check_template_img_dir
    img_dir = Rails.root.join("public/images")
    Dir.foreach(img_dir) do |dir|
       if dir!="." and dir!=".." and Template.find_by_id(dir.to_i).nil?
         FileUtils.remove_dir("#{img_dir}/#{dir}") if File.exists?("#{img_dir}/#{dir}")
       end
    end
  end
end
